#!/usr/bin/env python3
import sys
if sys.version_info < (3, 7):
    print("Error: civrun requires Python 3.7 or newer")
    exit(1)

import subprocess
import tempfile
from dataclasses import dataclass
from pathlib import Path
from typing import List, Optional


@dataclass
class Options:
    root: Path
    keep_assembly: bool
    verbose: Optional[int]
    breakpoint: Optional[str]
    max_optimisation_loop: Optional[int]
    extra_opt: bool
    no_opt: bool
    verbose_optimisation: Optional[int]
    size: bool
    instrs: bool
    vm_verbose: bool
    files: List[Path]
    tmpdir: Optional[Path] = None


def civcc(options: Options, file: Path) -> Path:
    if options.keep_assembly:
        asmfile = file.resolve().parent / f'{file.stem}.s'
    else:
        asmfile = Path(tempfile.mktemp('.s', dir=options.tmpdir))

    args = [str(options.root / 'civcc')]
    if options.verbose is not None:
        args.append(f'--verbose={options.verbose}')
    if options.breakpoint is not None:
        args.append(f'--breakpoint={options.breakpoint}')
    if options.max_optimisation_loop is not None:
        args.append(f'--max-optimisation-loop={options.max_optimisation_loop}')
    if options.extra_opt:
        args.append(f'--extra-opt')
    if options.no_opt:
        args.append(f'--no-opt')
    if options.verbose_optimisation is not None:
        args.append(f'--verbose-optimisation={options.verbose_optimisation}')
    args.append(f'--output={asmfile}')
    args.append(str(file))

    process = subprocess.run(args)
    if process.returncode != 0:
        exit(process.returncode)

    return asmfile


def civas(options: Options, file: Path) -> Path:
    objfile = Path(tempfile.mktemp('.o', dir=options.tmpdir))
    args = [str(options.root / 'civas'), '-o', str(objfile), str(file)]
    process = subprocess.run(args)
    if process.returncode != 0:
        exit(process.returncode)
    return objfile


def civvm(options: Options, objfiles: List[Path]) -> None:
    args = [str(options.root / 'civvm')]
    if options.size:
        args.append('--size')
    if options.instrs:
        args.append('--instrs')
    if options.vm_verbose:
        args.append('--verbose')
    args += [str(file) for file in objfiles]
    process = subprocess.run(args)
    if process.returncode != 0:
        exit(process.returncode)


def main(options: Options) -> None:
    objfiles = []
    with tempfile.TemporaryDirectory() as tmpdir:
        options.tmpdir = Path(tmpdir)
        for file in options.files:
            asmfile = civcc(options, file)
            objfiles.append(civas(options, asmfile))
        civvm(options, objfiles)


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='civrun -- Run the CiviC '
                                     'compiler, assembler, and VM toolchain.')
    parser.add_argument(
        '-k', '--keep-assembly', action='store_true',
        help='Keeps the assembly files generated by civcc')

    compiler_group = parser.add_argument_group(
        'civcc', 'Compiler specific options')
    compiler_group.add_argument(
        '-v', '--verbose', type=int, default=None, metavar='INT',
        help='Produce verbose output')
    compiler_group.add_argument(
        '-b', '--breakpoint', type=str, default=None,
        help='Break at the action in your compiler given by the breakstring'
        '(<phase>.<action>) or the id seen in the structure. '
        'See civcc -s for options')
    compiler_group.add_argument(
        '-l', '--max-optimisation-loop', type=int, default=None, metavar='INT',
        help='Set the maximum cycle length of the optimisations to the value. '
        '0 is equivalent to --no-opt. Defaults to 25')
    optimisation_opts = compiler_group.add_mutually_exclusive_group()
    optimisation_opts.add_argument(
        '-O', '--extra-opt', action='store_true',
        help='Enables optimisations that are disabled by default. '
        'This includes varlet removal, after return removal, unused var '
        'symbol table entry removal, unused function removal, and redundant '
        'branches removal')
    optimisation_opts.add_argument(
        '-r', '--no-opt', action='store_true',
        help='Disable all optimisations')
    compiler_group.add_argument(
        '-V', '--verbose-optimisation', type=int, metavar='INT',
        help='Produce verbose output for optimisations only')

    vm_group = parser.add_argument_group('civvm', 'VM specific options')
    vm_group.add_argument('--size', action='store_true',
                          help='Display code size in bytes')
    vm_group.add_argument('--instrs', action='store_true',
                          help='Display number of executed instructions')
    vm_group.add_argument('--vm-verbose', action='store_true',
                          help='Print instructions during execution')

    parser.add_argument(
        'files', metavar='FILE', nargs='+', type=Path,
        help='CiviC files to compile and run together as one program')

    args = parser.parse_args()
    options = Options(Path(__file__).resolve().parent, **vars(args))
    try:
        main(options)
    except KeyboardInterrupt:
        exit(1)
    except Exception as e:
        print(f"{type(e).__name__}: {e}")
        exit(1)
