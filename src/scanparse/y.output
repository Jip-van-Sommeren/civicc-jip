State 87 conflicts: 19 shift/reduce
State 135 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decls

    2 decls: decl decls
    3      | %empty

    4 exprs: exprs_nonempty
    5      | %empty

    6 exprs_nonempty: expr
    7               | exprs COMMA expr

    8 arrexpr: SQUARE_BRACKET_L exprs SQUARE_BRACKET_R

    9 ids: ids_nonempty
   10    | %empty

   11 ids_nonempty: ID
   12             | ids COMMA ID

   13 funcall: ID BRACKET_L exprs BRACKET_R

   14 cast: BRACKET_L ctype BRACKET_R expr

   15 decl: globdecl
   16     | globdef
   17     | fundef

   18 fundef: ctype ID BRACKET_L params BRACKET_R compound_statement
   19       | EXPORT ctype ID BRACKET_L params BRACKET_R compound_statement

   20 compound_statement: CURLY_BRACKET_L funbody CURLY_BRACKET_R

   21 blocks: blocks_nonempty
   22       | %empty

   23 blocks_nonempty: block
   24                | blocks block

   25 block: vardecl
   26      | fundef
   27      | stmt

   28 funbody: blocks

   29 globdef: EXPORT ctype ID SEMICOLON
   30        | ctype ID SEMICOLON
   31        | EXPORT ctype ID LET expr SEMICOLON
   32        | ctype ID LET expr SEMICOLON

   33 globdecl: EXTERN ctype SQUARE_BRACKET_L ids SQUARE_BRACKET_R ID SEMICOLON
   34         | EXTERN ctype ID SEMICOLON

   35 stmts: %empty
   36      | stmts stmt

   37 param: ctype SQUARE_BRACKET_L ids SQUARE_BRACKET_R ID
   38      | ctype ID

   39 params: params_nonempty
   40       | %empty

   41 params_nonempty: param
   42                | params COMMA param

   43 stmt: assign
   44     | exprstmt
   45     | ifelse
   46     | while
   47     | dowhile
   48     | for
   49     | return

   50 return: RETURN expr SEMICOLON
   51       | RETURN SEMICOLON

   52 exprstmt: expr SEMICOLON

   53 ifelse: IF BRACKET_L expr BRACKET_R stmt_block
   54       | IF BRACKET_L expr BRACKET_R stmt_block ELSE stmt_block

   55 while: WHILE BRACKET_L expr BRACKET_R stmt_block

   56 stmt_block: CURLY_BRACKET_L stmts CURLY_BRACKET_R
   57           | stmt

   58 dowhile: DO stmt_block WHILE BRACKET_L expr BRACKET_R SEMICOLON

   59 for: FOR BRACKET_L INT_TYPE ID LET expr COMMA expr BRACKET_R stmt_block
   60    | FOR BRACKET_L INT_TYPE ID LET expr COMMA expr COMMA expr BRACKET_R stmt_block

   61 assign: varlet LET expr SEMICOLON

   62 vardecl: ctype ID var_decl_tail
   63        | ctype SQUARE_BRACKET_L exprs SQUARE_BRACKET_R ID var_decl_tail

   64 var_decl_tail: SEMICOLON
   65              | LET expr SEMICOLON

   66 varlet: ID

   67 var: ID

   68 expr: expr PLUS expr
   69     | expr MINUS expr
   70     | expr STAR expr
   71     | expr SLASH expr
   72     | expr MOD expr
   73     | expr EQ expr
   74     | expr NE expr
   75     | expr LT expr
   76     | expr LE expr
   77     | expr GT expr
   78     | expr GE expr
   79     | expr AND expr
   80     | expr OR expr
   81     | NOT expr
   82     | MINUS expr
   83     | cast
   84     | constants
   85     | var
   86     | funcall
   87     | arrexpr

   88 constants: floatval
   89          | intval
   90          | boolval

   91 floatval: FLOAT

   92 intval: NUM

   93 boolval: TRUEVAL
   94        | FALSEVAL

   95 ctype: INT_TYPE
   96      | FLOAT_TYPE
   97      | BOOL_TYPE
   98      | VOID_TYPE


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    BRACKET_L (258) 13 14 18 19 53 54 55 58 59 60
    BRACKET_R (259) 13 14 18 19 53 54 55 58 59 60
    COMMA (260) 7 12 42 59 60
    SEMICOLON (261) 29 30 31 32 33 34 50 51 52 58 61 64 65
    CURLY_BRACKET_L (262) 20 56
    CURLY_BRACKET_R (263) 20 56
    SQUARE_BRACKET_L (264) 8 33 37 63
    SQUARE_BRACKET_R (265) 8 33 37 63
    MINUS (266) 69 82
    PLUS (267) 68
    STAR (268) 70
    SLASH (269) 71
    MOD (270) 72
    LE (271) 76
    LT (272) 75
    GE (273) 78
    GT (274) 77
    EQ (275) 73
    NE (276) 74
    OR (277) 80
    AND (278) 79
    NOT (279) 81
    TRUEVAL (280) 93
    FALSEVAL (281) 94
    LET (282) 31 32 59 60 61 65
    INT_TYPE (283) 59 60 95
    FLOAT_TYPE (284) 96
    BOOL_TYPE (285) 97
    VOID_TYPE (286) 98
    EXPORT (287) 19 29 31
    RETURN (288) 50 51
    IF (289) 53 54
    ELSE (290) 54
    WHILE (291) 55 58
    DO (292) 58
    FOR (293) 59 60
    EXTERN (294) 33 34
    NUM <cint> (295) 92
    FLOAT <cflt> (296) 91
    ID <id> (297) 11 12 13 18 19 29 30 31 32 33 34 37 38 59 60 62 63 66 67
    UMINUS (298)
    THEN (299)


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    program <node> (46)
        on left: 1
        on right: 0
    decls <node> (47)
        on left: 2 3
        on right: 1 2
    exprs <node> (48)
        on left: 4 5
        on right: 7 8 13 63
    exprs_nonempty <node> (49)
        on left: 6 7
        on right: 4
    arrexpr <node> (50)
        on left: 8
        on right: 87
    ids <node> (51)
        on left: 9 10
        on right: 12 33 37
    ids_nonempty <node> (52)
        on left: 11 12
        on right: 9
    funcall <node> (53)
        on left: 13
        on right: 86
    cast <node> (54)
        on left: 14
        on right: 83
    decl <node> (55)
        on left: 15 16 17
        on right: 2
    fundef <node> (56)
        on left: 18 19
        on right: 17 26
    compound_statement <node> (57)
        on left: 20
        on right: 18 19
    blocks <node> (58)
        on left: 21 22
        on right: 24 28
    blocks_nonempty <node> (59)
        on left: 23 24
        on right: 21
    block <node> (60)
        on left: 25 26 27
        on right: 23 24
    funbody <node> (61)
        on left: 28
        on right: 20
    globdef <node> (62)
        on left: 29 30 31 32
        on right: 16
    globdecl <node> (63)
        on left: 33 34
        on right: 15
    stmts <node> (64)
        on left: 35 36
        on right: 36 56
    param <node> (65)
        on left: 37 38
        on right: 41 42
    params <node> (66)
        on left: 39 40
        on right: 18 19 42
    params_nonempty <node> (67)
        on left: 41 42
        on right: 39
    stmt <node> (68)
        on left: 43 44 45 46 47 48 49
        on right: 27 36 57
    return <node> (69)
        on left: 50 51
        on right: 49
    exprstmt <node> (70)
        on left: 52
        on right: 44
    ifelse <node> (71)
        on left: 53 54
        on right: 45
    while <node> (72)
        on left: 55
        on right: 46
    stmt_block <node> (73)
        on left: 56 57
        on right: 53 54 55 58 59 60
    dowhile <node> (74)
        on left: 58
        on right: 47
    for <node> (75)
        on left: 59 60
        on right: 48
    assign <node> (76)
        on left: 61
        on right: 43
    vardecl <node> (77)
        on left: 62 63
        on right: 25
    var_decl_tail <node> (78)
        on left: 64 65
        on right: 62 63
    varlet <node> (79)
        on left: 66
        on right: 61
    var <node> (80)
        on left: 67
        on right: 85
    expr <node> (81)
        on left: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87
        on right: 6 7 14 31 32 50 52 53 54 55 58 59 60 61 65 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82
    constants <node> (82)
        on left: 88 89 90
        on right: 84
    floatval <node> (83)
        on left: 91
        on right: 88
    intval <node> (84)
        on left: 92
        on right: 89
    boolval <node> (85)
        on left: 93 94
        on right: 90
    ctype <ctype> (86)
        on left: 95 96 97 98
        on right: 14 18 19 29 30 31 32 33 34 37 38 62 63


State 0

    0 $accept: . program $end

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4
    EXPORT      shift, and go to state 5
    EXTERN      shift, and go to state 6

    $default  reduce using rule 3 (decls)

    program   go to state 7
    decls     go to state 8
    decl      go to state 9
    fundef    go to state 10
    globdef   go to state 11
    globdecl  go to state 12
    ctype     go to state 13


State 1

   95 ctype: INT_TYPE .

    $default  reduce using rule 95 (ctype)


State 2

   96 ctype: FLOAT_TYPE .

    $default  reduce using rule 96 (ctype)


State 3

   97 ctype: BOOL_TYPE .

    $default  reduce using rule 97 (ctype)


State 4

   98 ctype: VOID_TYPE .

    $default  reduce using rule 98 (ctype)


State 5

   19 fundef: EXPORT . ctype ID BRACKET_L params BRACKET_R compound_statement
   29 globdef: EXPORT . ctype ID SEMICOLON
   31        | EXPORT . ctype ID LET expr SEMICOLON

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    ctype  go to state 14


State 6

   33 globdecl: EXTERN . ctype SQUARE_BRACKET_L ids SQUARE_BRACKET_R ID SEMICOLON
   34         | EXTERN . ctype ID SEMICOLON

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    ctype  go to state 15


State 7

    0 $accept: program . $end

    $end  shift, and go to state 16


State 8

    1 program: decls .

    $default  reduce using rule 1 (program)


State 9

    2 decls: decl . decls

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4
    EXPORT      shift, and go to state 5
    EXTERN      shift, and go to state 6

    $default  reduce using rule 3 (decls)

    decls     go to state 17
    decl      go to state 9
    fundef    go to state 10
    globdef   go to state 11
    globdecl  go to state 12
    ctype     go to state 13


State 10

   17 decl: fundef .

    $default  reduce using rule 17 (decl)


State 11

   16 decl: globdef .

    $default  reduce using rule 16 (decl)


State 12

   15 decl: globdecl .

    $default  reduce using rule 15 (decl)


State 13

   18 fundef: ctype . ID BRACKET_L params BRACKET_R compound_statement
   30 globdef: ctype . ID SEMICOLON
   32        | ctype . ID LET expr SEMICOLON

    ID  shift, and go to state 18


State 14

   19 fundef: EXPORT ctype . ID BRACKET_L params BRACKET_R compound_statement
   29 globdef: EXPORT ctype . ID SEMICOLON
   31        | EXPORT ctype . ID LET expr SEMICOLON

    ID  shift, and go to state 19


State 15

   33 globdecl: EXTERN ctype . SQUARE_BRACKET_L ids SQUARE_BRACKET_R ID SEMICOLON
   34         | EXTERN ctype . ID SEMICOLON

    SQUARE_BRACKET_L  shift, and go to state 20
    ID                shift, and go to state 21


State 16

    0 $accept: program $end .

    $default  accept


State 17

    2 decls: decl decls .

    $default  reduce using rule 2 (decls)


State 18

   18 fundef: ctype ID . BRACKET_L params BRACKET_R compound_statement
   30 globdef: ctype ID . SEMICOLON
   32        | ctype ID . LET expr SEMICOLON

    BRACKET_L  shift, and go to state 22
    SEMICOLON  shift, and go to state 23
    LET        shift, and go to state 24


State 19

   19 fundef: EXPORT ctype ID . BRACKET_L params BRACKET_R compound_statement
   29 globdef: EXPORT ctype ID . SEMICOLON
   31        | EXPORT ctype ID . LET expr SEMICOLON

    BRACKET_L  shift, and go to state 25
    SEMICOLON  shift, and go to state 26
    LET        shift, and go to state 27


State 20

   33 globdecl: EXTERN ctype SQUARE_BRACKET_L . ids SQUARE_BRACKET_R ID SEMICOLON

    ID  shift, and go to state 28

    $default  reduce using rule 10 (ids)

    ids           go to state 29
    ids_nonempty  go to state 30


State 21

   34 globdecl: EXTERN ctype ID . SEMICOLON

    SEMICOLON  shift, and go to state 31


State 22

   18 fundef: ctype ID BRACKET_L . params BRACKET_R compound_statement

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    $default  reduce using rule 40 (params)

    param            go to state 32
    params           go to state 33
    params_nonempty  go to state 34
    ctype            go to state 35


State 23

   30 globdef: ctype ID SEMICOLON .

    $default  reduce using rule 30 (globdef)


State 24

   32 globdef: ctype ID LET . expr SEMICOLON

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 49
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 25

   19 fundef: EXPORT ctype ID BRACKET_L . params BRACKET_R compound_statement

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    $default  reduce using rule 40 (params)

    param            go to state 32
    params           go to state 54
    params_nonempty  go to state 34
    ctype            go to state 35


State 26

   29 globdef: EXPORT ctype ID SEMICOLON .

    $default  reduce using rule 29 (globdef)


State 27

   31 globdef: EXPORT ctype ID LET . expr SEMICOLON

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 55
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 28

   11 ids_nonempty: ID .

    $default  reduce using rule 11 (ids_nonempty)


State 29

   12 ids_nonempty: ids . COMMA ID
   33 globdecl: EXTERN ctype SQUARE_BRACKET_L ids . SQUARE_BRACKET_R ID SEMICOLON

    COMMA             shift, and go to state 56
    SQUARE_BRACKET_R  shift, and go to state 57


State 30

    9 ids: ids_nonempty .

    $default  reduce using rule 9 (ids)


State 31

   34 globdecl: EXTERN ctype ID SEMICOLON .

    $default  reduce using rule 34 (globdecl)


State 32

   41 params_nonempty: param .

    $default  reduce using rule 41 (params_nonempty)


State 33

   18 fundef: ctype ID BRACKET_L params . BRACKET_R compound_statement
   42 params_nonempty: params . COMMA param

    BRACKET_R  shift, and go to state 58
    COMMA      shift, and go to state 59


State 34

   39 params: params_nonempty .

    $default  reduce using rule 39 (params)


State 35

   37 param: ctype . SQUARE_BRACKET_L ids SQUARE_BRACKET_R ID
   38      | ctype . ID

    SQUARE_BRACKET_L  shift, and go to state 60
    ID                shift, and go to state 61


State 36

   14 cast: BRACKET_L . ctype BRACKET_R expr

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    ctype  go to state 62


State 37

    8 arrexpr: SQUARE_BRACKET_L . exprs SQUARE_BRACKET_R

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    $default  reduce using rule 5 (exprs)

    exprs           go to state 63
    exprs_nonempty  go to state 64
    arrexpr         go to state 45
    funcall         go to state 46
    cast            go to state 47
    var             go to state 48
    expr            go to state 65
    constants       go to state 50
    floatval        go to state 51
    intval          go to state 52
    boolval         go to state 53


State 38

   82 expr: MINUS . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 66
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 39

   81 expr: NOT . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 67
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 40

   93 boolval: TRUEVAL .

    $default  reduce using rule 93 (boolval)


State 41

   94 boolval: FALSEVAL .

    $default  reduce using rule 94 (boolval)


State 42

   92 intval: NUM .

    $default  reduce using rule 92 (intval)


State 43

   91 floatval: FLOAT .

    $default  reduce using rule 91 (floatval)


State 44

   13 funcall: ID . BRACKET_L exprs BRACKET_R
   67 var: ID .

    BRACKET_L  shift, and go to state 68

    $default  reduce using rule 67 (var)


State 45

   87 expr: arrexpr .

    $default  reduce using rule 87 (expr)


State 46

   86 expr: funcall .

    $default  reduce using rule 86 (expr)


State 47

   83 expr: cast .

    $default  reduce using rule 83 (expr)


State 48

   85 expr: var .

    $default  reduce using rule 85 (expr)


State 49

   32 globdef: ctype ID LET expr . SEMICOLON
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    SEMICOLON  shift, and go to state 69
    MINUS      shift, and go to state 70
    PLUS       shift, and go to state 71
    STAR       shift, and go to state 72
    SLASH      shift, and go to state 73
    MOD        shift, and go to state 74
    LE         shift, and go to state 75
    LT         shift, and go to state 76
    GE         shift, and go to state 77
    GT         shift, and go to state 78
    EQ         shift, and go to state 79
    NE         shift, and go to state 80
    OR         shift, and go to state 81
    AND        shift, and go to state 82


State 50

   84 expr: constants .

    $default  reduce using rule 84 (expr)


State 51

   88 constants: floatval .

    $default  reduce using rule 88 (constants)


State 52

   89 constants: intval .

    $default  reduce using rule 89 (constants)


State 53

   90 constants: boolval .

    $default  reduce using rule 90 (constants)


State 54

   19 fundef: EXPORT ctype ID BRACKET_L params . BRACKET_R compound_statement
   42 params_nonempty: params . COMMA param

    BRACKET_R  shift, and go to state 83
    COMMA      shift, and go to state 59


State 55

   31 globdef: EXPORT ctype ID LET expr . SEMICOLON
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    SEMICOLON  shift, and go to state 84
    MINUS      shift, and go to state 70
    PLUS       shift, and go to state 71
    STAR       shift, and go to state 72
    SLASH      shift, and go to state 73
    MOD        shift, and go to state 74
    LE         shift, and go to state 75
    LT         shift, and go to state 76
    GE         shift, and go to state 77
    GT         shift, and go to state 78
    EQ         shift, and go to state 79
    NE         shift, and go to state 80
    OR         shift, and go to state 81
    AND        shift, and go to state 82


State 56

   12 ids_nonempty: ids COMMA . ID

    ID  shift, and go to state 85


State 57

   33 globdecl: EXTERN ctype SQUARE_BRACKET_L ids SQUARE_BRACKET_R . ID SEMICOLON

    ID  shift, and go to state 86


State 58

   18 fundef: ctype ID BRACKET_L params BRACKET_R . compound_statement

    CURLY_BRACKET_L  shift, and go to state 87

    compound_statement  go to state 88


State 59

   42 params_nonempty: params COMMA . param

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    param  go to state 89
    ctype  go to state 35


State 60

   37 param: ctype SQUARE_BRACKET_L . ids SQUARE_BRACKET_R ID

    ID  shift, and go to state 28

    $default  reduce using rule 10 (ids)

    ids           go to state 90
    ids_nonempty  go to state 30


State 61

   38 param: ctype ID .

    $default  reduce using rule 38 (param)


State 62

   14 cast: BRACKET_L ctype . BRACKET_R expr

    BRACKET_R  shift, and go to state 91


State 63

    7 exprs_nonempty: exprs . COMMA expr
    8 arrexpr: SQUARE_BRACKET_L exprs . SQUARE_BRACKET_R

    COMMA             shift, and go to state 92
    SQUARE_BRACKET_R  shift, and go to state 93


State 64

    4 exprs: exprs_nonempty .

    $default  reduce using rule 4 (exprs)


State 65

    6 exprs_nonempty: expr .
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74
    LE     shift, and go to state 75
    LT     shift, and go to state 76
    GE     shift, and go to state 77
    GT     shift, and go to state 78
    EQ     shift, and go to state 79
    NE     shift, and go to state 80
    OR     shift, and go to state 81
    AND    shift, and go to state 82

    $default  reduce using rule 6 (exprs_nonempty)


State 66

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr
   82     | MINUS expr .

    $default  reduce using rule 82 (expr)


State 67

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr
   81     | NOT expr .

    $default  reduce using rule 81 (expr)


State 68

   13 funcall: ID BRACKET_L . exprs BRACKET_R

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    $default  reduce using rule 5 (exprs)

    exprs           go to state 94
    exprs_nonempty  go to state 64
    arrexpr         go to state 45
    funcall         go to state 46
    cast            go to state 47
    var             go to state 48
    expr            go to state 65
    constants       go to state 50
    floatval        go to state 51
    intval          go to state 52
    boolval         go to state 53


State 69

   32 globdef: ctype ID LET expr SEMICOLON .

    $default  reduce using rule 32 (globdef)


State 70

   69 expr: expr MINUS . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 95
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 71

   68 expr: expr PLUS . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 96
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 72

   70 expr: expr STAR . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 97
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 73

   71 expr: expr SLASH . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 98
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 74

   72 expr: expr MOD . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 99
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 75

   76 expr: expr LE . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 100
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 76

   75 expr: expr LT . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 101
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 77

   78 expr: expr GE . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 102
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 78

   77 expr: expr GT . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 103
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 79

   73 expr: expr EQ . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 104
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 80

   74 expr: expr NE . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 105
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 81

   80 expr: expr OR . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 106
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 82

   79 expr: expr AND . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 107
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 83

   19 fundef: EXPORT ctype ID BRACKET_L params BRACKET_R . compound_statement

    CURLY_BRACKET_L  shift, and go to state 87

    compound_statement  go to state 108


State 84

   31 globdef: EXPORT ctype ID LET expr SEMICOLON .

    $default  reduce using rule 31 (globdef)


State 85

   12 ids_nonempty: ids COMMA ID .

    $default  reduce using rule 12 (ids_nonempty)


State 86

   33 globdecl: EXTERN ctype SQUARE_BRACKET_L ids SQUARE_BRACKET_R ID . SEMICOLON

    SEMICOLON  shift, and go to state 109


State 87

   20 compound_statement: CURLY_BRACKET_L . funbody CURLY_BRACKET_R

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    INT_TYPE          shift, and go to state 1
    FLOAT_TYPE        shift, and go to state 2
    BOOL_TYPE         shift, and go to state 3
    VOID_TYPE         shift, and go to state 4
    EXPORT            shift, and go to state 110
    RETURN            shift, and go to state 111
    IF                shift, and go to state 112
    WHILE             shift, and go to state 113
    DO                shift, and go to state 114
    FOR               shift, and go to state 115
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 116

    BRACKET_L         [reduce using rule 22 (blocks)]
    SQUARE_BRACKET_L  [reduce using rule 22 (blocks)]
    MINUS             [reduce using rule 22 (blocks)]
    NOT               [reduce using rule 22 (blocks)]
    TRUEVAL           [reduce using rule 22 (blocks)]
    FALSEVAL          [reduce using rule 22 (blocks)]
    INT_TYPE          [reduce using rule 22 (blocks)]
    FLOAT_TYPE        [reduce using rule 22 (blocks)]
    BOOL_TYPE         [reduce using rule 22 (blocks)]
    VOID_TYPE         [reduce using rule 22 (blocks)]
    EXPORT            [reduce using rule 22 (blocks)]
    RETURN            [reduce using rule 22 (blocks)]
    IF                [reduce using rule 22 (blocks)]
    WHILE             [reduce using rule 22 (blocks)]
    DO                [reduce using rule 22 (blocks)]
    FOR               [reduce using rule 22 (blocks)]
    NUM               [reduce using rule 22 (blocks)]
    FLOAT             [reduce using rule 22 (blocks)]
    ID                [reduce using rule 22 (blocks)]
    $default          reduce using rule 22 (blocks)

    arrexpr          go to state 45
    funcall          go to state 46
    cast             go to state 47
    fundef           go to state 117
    blocks           go to state 118
    blocks_nonempty  go to state 119
    block            go to state 120
    funbody          go to state 121
    stmt             go to state 122
    return           go to state 123
    exprstmt         go to state 124
    ifelse           go to state 125
    while            go to state 126
    dowhile          go to state 127
    for              go to state 128
    assign           go to state 129
    vardecl          go to state 130
    varlet           go to state 131
    var              go to state 48
    expr             go to state 132
    constants        go to state 50
    floatval         go to state 51
    intval           go to state 52
    boolval          go to state 53
    ctype            go to state 133


State 88

   18 fundef: ctype ID BRACKET_L params BRACKET_R compound_statement .

    $default  reduce using rule 18 (fundef)


State 89

   42 params_nonempty: params COMMA param .

    $default  reduce using rule 42 (params_nonempty)


State 90

   12 ids_nonempty: ids . COMMA ID
   37 param: ctype SQUARE_BRACKET_L ids . SQUARE_BRACKET_R ID

    COMMA             shift, and go to state 56
    SQUARE_BRACKET_R  shift, and go to state 134


State 91

   14 cast: BRACKET_L ctype BRACKET_R . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 135
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 92

    7 exprs_nonempty: exprs COMMA . expr

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 136
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 93

    8 arrexpr: SQUARE_BRACKET_L exprs SQUARE_BRACKET_R .

    $default  reduce using rule 8 (arrexpr)


State 94

    7 exprs_nonempty: exprs . COMMA expr
   13 funcall: ID BRACKET_L exprs . BRACKET_R

    BRACKET_R  shift, and go to state 137
    COMMA      shift, and go to state 92


State 95

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   69     | expr MINUS expr .
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74

    $default  reduce using rule 69 (expr)


State 96

   68 expr: expr . PLUS expr
   68     | expr PLUS expr .
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74

    $default  reduce using rule 68 (expr)


State 97

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   70     | expr STAR expr .
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    $default  reduce using rule 70 (expr)


State 98

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   71     | expr SLASH expr .
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    $default  reduce using rule 71 (expr)


State 99

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   72     | expr MOD expr .
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    $default  reduce using rule 72 (expr)


State 100

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   76     | expr LE expr .
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74

    $default  reduce using rule 76 (expr)


State 101

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   75     | expr LT expr .
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74

    $default  reduce using rule 75 (expr)


State 102

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   78     | expr GE expr .
   79     | expr . AND expr
   80     | expr . OR expr

    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74

    $default  reduce using rule 78 (expr)


State 103

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   77     | expr GT expr .
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74

    $default  reduce using rule 77 (expr)


State 104

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   73     | expr EQ expr .
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74
    LE     shift, and go to state 75
    LT     shift, and go to state 76
    GE     shift, and go to state 77
    GT     shift, and go to state 78

    $default  reduce using rule 73 (expr)


State 105

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   74     | expr NE expr .
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74
    LE     shift, and go to state 75
    LT     shift, and go to state 76
    GE     shift, and go to state 77
    GT     shift, and go to state 78

    $default  reduce using rule 74 (expr)


State 106

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr
   80     | expr OR expr .

    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74
    LE     shift, and go to state 75
    LT     shift, and go to state 76
    GE     shift, and go to state 77
    GT     shift, and go to state 78
    EQ     shift, and go to state 79
    NE     shift, and go to state 80
    AND    shift, and go to state 82

    $default  reduce using rule 80 (expr)


State 107

   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   79     | expr AND expr .
   80     | expr . OR expr

    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74
    LE     shift, and go to state 75
    LT     shift, and go to state 76
    GE     shift, and go to state 77
    GT     shift, and go to state 78
    EQ     shift, and go to state 79
    NE     shift, and go to state 80

    $default  reduce using rule 79 (expr)


State 108

   19 fundef: EXPORT ctype ID BRACKET_L params BRACKET_R compound_statement .

    $default  reduce using rule 19 (fundef)


State 109

   33 globdecl: EXTERN ctype SQUARE_BRACKET_L ids SQUARE_BRACKET_R ID SEMICOLON .

    $default  reduce using rule 33 (globdecl)


State 110

   19 fundef: EXPORT . ctype ID BRACKET_L params BRACKET_R compound_statement

    INT_TYPE    shift, and go to state 1
    FLOAT_TYPE  shift, and go to state 2
    BOOL_TYPE   shift, and go to state 3
    VOID_TYPE   shift, and go to state 4

    ctype  go to state 138


State 111

   50 return: RETURN . expr SEMICOLON
   51       | RETURN . SEMICOLON

    BRACKET_L         shift, and go to state 36
    SEMICOLON         shift, and go to state 139
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 140
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 112

   53 ifelse: IF . BRACKET_L expr BRACKET_R stmt_block
   54       | IF . BRACKET_L expr BRACKET_R stmt_block ELSE stmt_block

    BRACKET_L  shift, and go to state 141


State 113

   55 while: WHILE . BRACKET_L expr BRACKET_R stmt_block

    BRACKET_L  shift, and go to state 142


State 114

   58 dowhile: DO . stmt_block WHILE BRACKET_L expr BRACKET_R SEMICOLON

    BRACKET_L         shift, and go to state 36
    CURLY_BRACKET_L   shift, and go to state 143
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    RETURN            shift, and go to state 111
    IF                shift, and go to state 112
    WHILE             shift, and go to state 113
    DO                shift, and go to state 114
    FOR               shift, and go to state 115
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 116

    arrexpr     go to state 45
    funcall     go to state 46
    cast        go to state 47
    stmt        go to state 144
    return      go to state 123
    exprstmt    go to state 124
    ifelse      go to state 125
    while       go to state 126
    stmt_block  go to state 145
    dowhile     go to state 127
    for         go to state 128
    assign      go to state 129
    varlet      go to state 131
    var         go to state 48
    expr        go to state 132
    constants   go to state 50
    floatval    go to state 51
    intval      go to state 52
    boolval     go to state 53


State 115

   59 for: FOR . BRACKET_L INT_TYPE ID LET expr COMMA expr BRACKET_R stmt_block
   60    | FOR . BRACKET_L INT_TYPE ID LET expr COMMA expr COMMA expr BRACKET_R stmt_block

    BRACKET_L  shift, and go to state 146


State 116

   13 funcall: ID . BRACKET_L exprs BRACKET_R
   66 varlet: ID .
   67 var: ID .

    BRACKET_L  shift, and go to state 68

    LET       reduce using rule 66 (varlet)
    $default  reduce using rule 67 (var)


State 117

   26 block: fundef .

    $default  reduce using rule 26 (block)


State 118

   24 blocks_nonempty: blocks . block
   28 funbody: blocks .

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    INT_TYPE          shift, and go to state 1
    FLOAT_TYPE        shift, and go to state 2
    BOOL_TYPE         shift, and go to state 3
    VOID_TYPE         shift, and go to state 4
    EXPORT            shift, and go to state 110
    RETURN            shift, and go to state 111
    IF                shift, and go to state 112
    WHILE             shift, and go to state 113
    DO                shift, and go to state 114
    FOR               shift, and go to state 115
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 116

    $default  reduce using rule 28 (funbody)

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    fundef     go to state 117
    block      go to state 147
    stmt       go to state 122
    return     go to state 123
    exprstmt   go to state 124
    ifelse     go to state 125
    while      go to state 126
    dowhile    go to state 127
    for        go to state 128
    assign     go to state 129
    vardecl    go to state 130
    varlet     go to state 131
    var        go to state 48
    expr       go to state 132
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53
    ctype      go to state 133


State 119

   21 blocks: blocks_nonempty .

    $default  reduce using rule 21 (blocks)


State 120

   23 blocks_nonempty: block .

    $default  reduce using rule 23 (blocks_nonempty)


State 121

   20 compound_statement: CURLY_BRACKET_L funbody . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 148


State 122

   27 block: stmt .

    $default  reduce using rule 27 (block)


State 123

   49 stmt: return .

    $default  reduce using rule 49 (stmt)


State 124

   44 stmt: exprstmt .

    $default  reduce using rule 44 (stmt)


State 125

   45 stmt: ifelse .

    $default  reduce using rule 45 (stmt)


State 126

   46 stmt: while .

    $default  reduce using rule 46 (stmt)


State 127

   47 stmt: dowhile .

    $default  reduce using rule 47 (stmt)


State 128

   48 stmt: for .

    $default  reduce using rule 48 (stmt)


State 129

   43 stmt: assign .

    $default  reduce using rule 43 (stmt)


State 130

   25 block: vardecl .

    $default  reduce using rule 25 (block)


State 131

   61 assign: varlet . LET expr SEMICOLON

    LET  shift, and go to state 149


State 132

   52 exprstmt: expr . SEMICOLON
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    SEMICOLON  shift, and go to state 150
    MINUS      shift, and go to state 70
    PLUS       shift, and go to state 71
    STAR       shift, and go to state 72
    SLASH      shift, and go to state 73
    MOD        shift, and go to state 74
    LE         shift, and go to state 75
    LT         shift, and go to state 76
    GE         shift, and go to state 77
    GT         shift, and go to state 78
    EQ         shift, and go to state 79
    NE         shift, and go to state 80
    OR         shift, and go to state 81
    AND        shift, and go to state 82


State 133

   18 fundef: ctype . ID BRACKET_L params BRACKET_R compound_statement
   62 vardecl: ctype . ID var_decl_tail
   63        | ctype . SQUARE_BRACKET_L exprs SQUARE_BRACKET_R ID var_decl_tail

    SQUARE_BRACKET_L  shift, and go to state 151
    ID                shift, and go to state 152


State 134

   37 param: ctype SQUARE_BRACKET_L ids SQUARE_BRACKET_R . ID

    ID  shift, and go to state 153


State 135

   14 cast: BRACKET_L ctype BRACKET_R expr .
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74
    LE     shift, and go to state 75
    LT     shift, and go to state 76
    GE     shift, and go to state 77
    GT     shift, and go to state 78
    EQ     shift, and go to state 79
    NE     shift, and go to state 80
    OR     shift, and go to state 81
    AND    shift, and go to state 82

    MINUS     [reduce using rule 14 (cast)]
    PLUS      [reduce using rule 14 (cast)]
    STAR      [reduce using rule 14 (cast)]
    SLASH     [reduce using rule 14 (cast)]
    MOD       [reduce using rule 14 (cast)]
    LE        [reduce using rule 14 (cast)]
    LT        [reduce using rule 14 (cast)]
    GE        [reduce using rule 14 (cast)]
    GT        [reduce using rule 14 (cast)]
    EQ        [reduce using rule 14 (cast)]
    NE        [reduce using rule 14 (cast)]
    OR        [reduce using rule 14 (cast)]
    AND       [reduce using rule 14 (cast)]
    $default  reduce using rule 14 (cast)


State 136

    7 exprs_nonempty: exprs COMMA expr .
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74
    LE     shift, and go to state 75
    LT     shift, and go to state 76
    GE     shift, and go to state 77
    GT     shift, and go to state 78
    EQ     shift, and go to state 79
    NE     shift, and go to state 80
    OR     shift, and go to state 81
    AND    shift, and go to state 82

    $default  reduce using rule 7 (exprs_nonempty)


State 137

   13 funcall: ID BRACKET_L exprs BRACKET_R .

    $default  reduce using rule 13 (funcall)


State 138

   19 fundef: EXPORT ctype . ID BRACKET_L params BRACKET_R compound_statement

    ID  shift, and go to state 154


State 139

   51 return: RETURN SEMICOLON .

    $default  reduce using rule 51 (return)


State 140

   50 return: RETURN expr . SEMICOLON
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    SEMICOLON  shift, and go to state 155
    MINUS      shift, and go to state 70
    PLUS       shift, and go to state 71
    STAR       shift, and go to state 72
    SLASH      shift, and go to state 73
    MOD        shift, and go to state 74
    LE         shift, and go to state 75
    LT         shift, and go to state 76
    GE         shift, and go to state 77
    GT         shift, and go to state 78
    EQ         shift, and go to state 79
    NE         shift, and go to state 80
    OR         shift, and go to state 81
    AND        shift, and go to state 82


State 141

   53 ifelse: IF BRACKET_L . expr BRACKET_R stmt_block
   54       | IF BRACKET_L . expr BRACKET_R stmt_block ELSE stmt_block

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 156
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 142

   55 while: WHILE BRACKET_L . expr BRACKET_R stmt_block

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 157
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 143

   56 stmt_block: CURLY_BRACKET_L . stmts CURLY_BRACKET_R

    $default  reduce using rule 35 (stmts)

    stmts  go to state 158


State 144

   57 stmt_block: stmt .

    $default  reduce using rule 57 (stmt_block)


State 145

   58 dowhile: DO stmt_block . WHILE BRACKET_L expr BRACKET_R SEMICOLON

    WHILE  shift, and go to state 159


State 146

   59 for: FOR BRACKET_L . INT_TYPE ID LET expr COMMA expr BRACKET_R stmt_block
   60    | FOR BRACKET_L . INT_TYPE ID LET expr COMMA expr COMMA expr BRACKET_R stmt_block

    INT_TYPE  shift, and go to state 160


State 147

   24 blocks_nonempty: blocks block .

    $default  reduce using rule 24 (blocks_nonempty)


State 148

   20 compound_statement: CURLY_BRACKET_L funbody CURLY_BRACKET_R .

    $default  reduce using rule 20 (compound_statement)


State 149

   61 assign: varlet LET . expr SEMICOLON

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 161
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 150

   52 exprstmt: expr SEMICOLON .

    $default  reduce using rule 52 (exprstmt)


State 151

   63 vardecl: ctype SQUARE_BRACKET_L . exprs SQUARE_BRACKET_R ID var_decl_tail

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    $default  reduce using rule 5 (exprs)

    exprs           go to state 162
    exprs_nonempty  go to state 64
    arrexpr         go to state 45
    funcall         go to state 46
    cast            go to state 47
    var             go to state 48
    expr            go to state 65
    constants       go to state 50
    floatval        go to state 51
    intval          go to state 52
    boolval         go to state 53


State 152

   18 fundef: ctype ID . BRACKET_L params BRACKET_R compound_statement
   62 vardecl: ctype ID . var_decl_tail

    BRACKET_L  shift, and go to state 22
    SEMICOLON  shift, and go to state 163
    LET        shift, and go to state 164

    var_decl_tail  go to state 165


State 153

   37 param: ctype SQUARE_BRACKET_L ids SQUARE_BRACKET_R ID .

    $default  reduce using rule 37 (param)


State 154

   19 fundef: EXPORT ctype ID . BRACKET_L params BRACKET_R compound_statement

    BRACKET_L  shift, and go to state 25


State 155

   50 return: RETURN expr SEMICOLON .

    $default  reduce using rule 50 (return)


State 156

   53 ifelse: IF BRACKET_L expr . BRACKET_R stmt_block
   54       | IF BRACKET_L expr . BRACKET_R stmt_block ELSE stmt_block
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    BRACKET_R  shift, and go to state 166
    MINUS      shift, and go to state 70
    PLUS       shift, and go to state 71
    STAR       shift, and go to state 72
    SLASH      shift, and go to state 73
    MOD        shift, and go to state 74
    LE         shift, and go to state 75
    LT         shift, and go to state 76
    GE         shift, and go to state 77
    GT         shift, and go to state 78
    EQ         shift, and go to state 79
    NE         shift, and go to state 80
    OR         shift, and go to state 81
    AND        shift, and go to state 82


State 157

   55 while: WHILE BRACKET_L expr . BRACKET_R stmt_block
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    BRACKET_R  shift, and go to state 167
    MINUS      shift, and go to state 70
    PLUS       shift, and go to state 71
    STAR       shift, and go to state 72
    SLASH      shift, and go to state 73
    MOD        shift, and go to state 74
    LE         shift, and go to state 75
    LT         shift, and go to state 76
    GE         shift, and go to state 77
    GT         shift, and go to state 78
    EQ         shift, and go to state 79
    NE         shift, and go to state 80
    OR         shift, and go to state 81
    AND        shift, and go to state 82


State 158

   36 stmts: stmts . stmt
   56 stmt_block: CURLY_BRACKET_L stmts . CURLY_BRACKET_R

    BRACKET_L         shift, and go to state 36
    CURLY_BRACKET_R   shift, and go to state 168
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    RETURN            shift, and go to state 111
    IF                shift, and go to state 112
    WHILE             shift, and go to state 113
    DO                shift, and go to state 114
    FOR               shift, and go to state 115
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 116

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    stmt       go to state 169
    return     go to state 123
    exprstmt   go to state 124
    ifelse     go to state 125
    while      go to state 126
    dowhile    go to state 127
    for        go to state 128
    assign     go to state 129
    varlet     go to state 131
    var        go to state 48
    expr       go to state 132
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 159

   58 dowhile: DO stmt_block WHILE . BRACKET_L expr BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 170


State 160

   59 for: FOR BRACKET_L INT_TYPE . ID LET expr COMMA expr BRACKET_R stmt_block
   60    | FOR BRACKET_L INT_TYPE . ID LET expr COMMA expr COMMA expr BRACKET_R stmt_block

    ID  shift, and go to state 171


State 161

   61 assign: varlet LET expr . SEMICOLON
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    SEMICOLON  shift, and go to state 172
    MINUS      shift, and go to state 70
    PLUS       shift, and go to state 71
    STAR       shift, and go to state 72
    SLASH      shift, and go to state 73
    MOD        shift, and go to state 74
    LE         shift, and go to state 75
    LT         shift, and go to state 76
    GE         shift, and go to state 77
    GT         shift, and go to state 78
    EQ         shift, and go to state 79
    NE         shift, and go to state 80
    OR         shift, and go to state 81
    AND        shift, and go to state 82


State 162

    7 exprs_nonempty: exprs . COMMA expr
   63 vardecl: ctype SQUARE_BRACKET_L exprs . SQUARE_BRACKET_R ID var_decl_tail

    COMMA             shift, and go to state 92
    SQUARE_BRACKET_R  shift, and go to state 173


State 163

   64 var_decl_tail: SEMICOLON .

    $default  reduce using rule 64 (var_decl_tail)


State 164

   65 var_decl_tail: LET . expr SEMICOLON

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 174
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 165

   62 vardecl: ctype ID var_decl_tail .

    $default  reduce using rule 62 (vardecl)


State 166

   53 ifelse: IF BRACKET_L expr BRACKET_R . stmt_block
   54       | IF BRACKET_L expr BRACKET_R . stmt_block ELSE stmt_block

    BRACKET_L         shift, and go to state 36
    CURLY_BRACKET_L   shift, and go to state 143
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    RETURN            shift, and go to state 111
    IF                shift, and go to state 112
    WHILE             shift, and go to state 113
    DO                shift, and go to state 114
    FOR               shift, and go to state 115
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 116

    arrexpr     go to state 45
    funcall     go to state 46
    cast        go to state 47
    stmt        go to state 144
    return      go to state 123
    exprstmt    go to state 124
    ifelse      go to state 125
    while       go to state 126
    stmt_block  go to state 175
    dowhile     go to state 127
    for         go to state 128
    assign      go to state 129
    varlet      go to state 131
    var         go to state 48
    expr        go to state 132
    constants   go to state 50
    floatval    go to state 51
    intval      go to state 52
    boolval     go to state 53


State 167

   55 while: WHILE BRACKET_L expr BRACKET_R . stmt_block

    BRACKET_L         shift, and go to state 36
    CURLY_BRACKET_L   shift, and go to state 143
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    RETURN            shift, and go to state 111
    IF                shift, and go to state 112
    WHILE             shift, and go to state 113
    DO                shift, and go to state 114
    FOR               shift, and go to state 115
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 116

    arrexpr     go to state 45
    funcall     go to state 46
    cast        go to state 47
    stmt        go to state 144
    return      go to state 123
    exprstmt    go to state 124
    ifelse      go to state 125
    while       go to state 126
    stmt_block  go to state 176
    dowhile     go to state 127
    for         go to state 128
    assign      go to state 129
    varlet      go to state 131
    var         go to state 48
    expr        go to state 132
    constants   go to state 50
    floatval    go to state 51
    intval      go to state 52
    boolval     go to state 53


State 168

   56 stmt_block: CURLY_BRACKET_L stmts CURLY_BRACKET_R .

    $default  reduce using rule 56 (stmt_block)


State 169

   36 stmts: stmts stmt .

    $default  reduce using rule 36 (stmts)


State 170

   58 dowhile: DO stmt_block WHILE BRACKET_L . expr BRACKET_R SEMICOLON

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 177
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 171

   59 for: FOR BRACKET_L INT_TYPE ID . LET expr COMMA expr BRACKET_R stmt_block
   60    | FOR BRACKET_L INT_TYPE ID . LET expr COMMA expr COMMA expr BRACKET_R stmt_block

    LET  shift, and go to state 178


State 172

   61 assign: varlet LET expr SEMICOLON .

    $default  reduce using rule 61 (assign)


State 173

   63 vardecl: ctype SQUARE_BRACKET_L exprs SQUARE_BRACKET_R . ID var_decl_tail

    ID  shift, and go to state 179


State 174

   65 var_decl_tail: LET expr . SEMICOLON
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    SEMICOLON  shift, and go to state 180
    MINUS      shift, and go to state 70
    PLUS       shift, and go to state 71
    STAR       shift, and go to state 72
    SLASH      shift, and go to state 73
    MOD        shift, and go to state 74
    LE         shift, and go to state 75
    LT         shift, and go to state 76
    GE         shift, and go to state 77
    GT         shift, and go to state 78
    EQ         shift, and go to state 79
    NE         shift, and go to state 80
    OR         shift, and go to state 81
    AND        shift, and go to state 82


State 175

   53 ifelse: IF BRACKET_L expr BRACKET_R stmt_block .
   54       | IF BRACKET_L expr BRACKET_R stmt_block . ELSE stmt_block

    ELSE  shift, and go to state 181

    $default  reduce using rule 53 (ifelse)


State 176

   55 while: WHILE BRACKET_L expr BRACKET_R stmt_block .

    $default  reduce using rule 55 (while)


State 177

   58 dowhile: DO stmt_block WHILE BRACKET_L expr . BRACKET_R SEMICOLON
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    BRACKET_R  shift, and go to state 182
    MINUS      shift, and go to state 70
    PLUS       shift, and go to state 71
    STAR       shift, and go to state 72
    SLASH      shift, and go to state 73
    MOD        shift, and go to state 74
    LE         shift, and go to state 75
    LT         shift, and go to state 76
    GE         shift, and go to state 77
    GT         shift, and go to state 78
    EQ         shift, and go to state 79
    NE         shift, and go to state 80
    OR         shift, and go to state 81
    AND        shift, and go to state 82


State 178

   59 for: FOR BRACKET_L INT_TYPE ID LET . expr COMMA expr BRACKET_R stmt_block
   60    | FOR BRACKET_L INT_TYPE ID LET . expr COMMA expr COMMA expr BRACKET_R stmt_block

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 183
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 179

   63 vardecl: ctype SQUARE_BRACKET_L exprs SQUARE_BRACKET_R ID . var_decl_tail

    SEMICOLON  shift, and go to state 163
    LET        shift, and go to state 164

    var_decl_tail  go to state 184


State 180

   65 var_decl_tail: LET expr SEMICOLON .

    $default  reduce using rule 65 (var_decl_tail)


State 181

   54 ifelse: IF BRACKET_L expr BRACKET_R stmt_block ELSE . stmt_block

    BRACKET_L         shift, and go to state 36
    CURLY_BRACKET_L   shift, and go to state 143
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    RETURN            shift, and go to state 111
    IF                shift, and go to state 112
    WHILE             shift, and go to state 113
    DO                shift, and go to state 114
    FOR               shift, and go to state 115
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 116

    arrexpr     go to state 45
    funcall     go to state 46
    cast        go to state 47
    stmt        go to state 144
    return      go to state 123
    exprstmt    go to state 124
    ifelse      go to state 125
    while       go to state 126
    stmt_block  go to state 185
    dowhile     go to state 127
    for         go to state 128
    assign      go to state 129
    varlet      go to state 131
    var         go to state 48
    expr        go to state 132
    constants   go to state 50
    floatval    go to state 51
    intval      go to state 52
    boolval     go to state 53


State 182

   58 dowhile: DO stmt_block WHILE BRACKET_L expr BRACKET_R . SEMICOLON

    SEMICOLON  shift, and go to state 186


State 183

   59 for: FOR BRACKET_L INT_TYPE ID LET expr . COMMA expr BRACKET_R stmt_block
   60    | FOR BRACKET_L INT_TYPE ID LET expr . COMMA expr COMMA expr BRACKET_R stmt_block
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    COMMA  shift, and go to state 187
    MINUS  shift, and go to state 70
    PLUS   shift, and go to state 71
    STAR   shift, and go to state 72
    SLASH  shift, and go to state 73
    MOD    shift, and go to state 74
    LE     shift, and go to state 75
    LT     shift, and go to state 76
    GE     shift, and go to state 77
    GT     shift, and go to state 78
    EQ     shift, and go to state 79
    NE     shift, and go to state 80
    OR     shift, and go to state 81
    AND    shift, and go to state 82


State 184

   63 vardecl: ctype SQUARE_BRACKET_L exprs SQUARE_BRACKET_R ID var_decl_tail .

    $default  reduce using rule 63 (vardecl)


State 185

   54 ifelse: IF BRACKET_L expr BRACKET_R stmt_block ELSE stmt_block .

    $default  reduce using rule 54 (ifelse)


State 186

   58 dowhile: DO stmt_block WHILE BRACKET_L expr BRACKET_R SEMICOLON .

    $default  reduce using rule 58 (dowhile)


State 187

   59 for: FOR BRACKET_L INT_TYPE ID LET expr COMMA . expr BRACKET_R stmt_block
   60    | FOR BRACKET_L INT_TYPE ID LET expr COMMA . expr COMMA expr BRACKET_R stmt_block

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 188
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 188

   59 for: FOR BRACKET_L INT_TYPE ID LET expr COMMA expr . BRACKET_R stmt_block
   60    | FOR BRACKET_L INT_TYPE ID LET expr COMMA expr . COMMA expr BRACKET_R stmt_block
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    BRACKET_R  shift, and go to state 189
    COMMA      shift, and go to state 190
    MINUS      shift, and go to state 70
    PLUS       shift, and go to state 71
    STAR       shift, and go to state 72
    SLASH      shift, and go to state 73
    MOD        shift, and go to state 74
    LE         shift, and go to state 75
    LT         shift, and go to state 76
    GE         shift, and go to state 77
    GT         shift, and go to state 78
    EQ         shift, and go to state 79
    NE         shift, and go to state 80
    OR         shift, and go to state 81
    AND        shift, and go to state 82


State 189

   59 for: FOR BRACKET_L INT_TYPE ID LET expr COMMA expr BRACKET_R . stmt_block

    BRACKET_L         shift, and go to state 36
    CURLY_BRACKET_L   shift, and go to state 143
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    RETURN            shift, and go to state 111
    IF                shift, and go to state 112
    WHILE             shift, and go to state 113
    DO                shift, and go to state 114
    FOR               shift, and go to state 115
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 116

    arrexpr     go to state 45
    funcall     go to state 46
    cast        go to state 47
    stmt        go to state 144
    return      go to state 123
    exprstmt    go to state 124
    ifelse      go to state 125
    while       go to state 126
    stmt_block  go to state 191
    dowhile     go to state 127
    for         go to state 128
    assign      go to state 129
    varlet      go to state 131
    var         go to state 48
    expr        go to state 132
    constants   go to state 50
    floatval    go to state 51
    intval      go to state 52
    boolval     go to state 53


State 190

   60 for: FOR BRACKET_L INT_TYPE ID LET expr COMMA expr COMMA . expr BRACKET_R stmt_block

    BRACKET_L         shift, and go to state 36
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 44

    arrexpr    go to state 45
    funcall    go to state 46
    cast       go to state 47
    var        go to state 48
    expr       go to state 192
    constants  go to state 50
    floatval   go to state 51
    intval     go to state 52
    boolval    go to state 53


State 191

   59 for: FOR BRACKET_L INT_TYPE ID LET expr COMMA expr BRACKET_R stmt_block .

    $default  reduce using rule 59 (for)


State 192

   60 for: FOR BRACKET_L INT_TYPE ID LET expr COMMA expr COMMA expr . BRACKET_R stmt_block
   68 expr: expr . PLUS expr
   69     | expr . MINUS expr
   70     | expr . STAR expr
   71     | expr . SLASH expr
   72     | expr . MOD expr
   73     | expr . EQ expr
   74     | expr . NE expr
   75     | expr . LT expr
   76     | expr . LE expr
   77     | expr . GT expr
   78     | expr . GE expr
   79     | expr . AND expr
   80     | expr . OR expr

    BRACKET_R  shift, and go to state 193
    MINUS      shift, and go to state 70
    PLUS       shift, and go to state 71
    STAR       shift, and go to state 72
    SLASH      shift, and go to state 73
    MOD        shift, and go to state 74
    LE         shift, and go to state 75
    LT         shift, and go to state 76
    GE         shift, and go to state 77
    GT         shift, and go to state 78
    EQ         shift, and go to state 79
    NE         shift, and go to state 80
    OR         shift, and go to state 81
    AND        shift, and go to state 82


State 193

   60 for: FOR BRACKET_L INT_TYPE ID LET expr COMMA expr COMMA expr BRACKET_R . stmt_block

    BRACKET_L         shift, and go to state 36
    CURLY_BRACKET_L   shift, and go to state 143
    SQUARE_BRACKET_L  shift, and go to state 37
    MINUS             shift, and go to state 38
    NOT               shift, and go to state 39
    TRUEVAL           shift, and go to state 40
    FALSEVAL          shift, and go to state 41
    RETURN            shift, and go to state 111
    IF                shift, and go to state 112
    WHILE             shift, and go to state 113
    DO                shift, and go to state 114
    FOR               shift, and go to state 115
    NUM               shift, and go to state 42
    FLOAT             shift, and go to state 43
    ID                shift, and go to state 116

    arrexpr     go to state 45
    funcall     go to state 46
    cast        go to state 47
    stmt        go to state 144
    return      go to state 123
    exprstmt    go to state 124
    ifelse      go to state 125
    while       go to state 126
    stmt_block  go to state 194
    dowhile     go to state 127
    for         go to state 128
    assign      go to state 129
    varlet      go to state 131
    var         go to state 48
    expr        go to state 132
    constants   go to state 50
    floatval    go to state 51
    intval      go to state 52
    boolval     go to state 53


State 194

   60 for: FOR BRACKET_L INT_TYPE ID LET expr COMMA expr COMMA expr BRACKET_R stmt_block .

    $default  reduce using rule 60 (for)
