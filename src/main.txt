enum BasicType {
    prefix = BT,
    values {
        bool, int, float
    }
};

enum MonOpType {
    prefix = MO,
    values {
        not, neg
    }
};

enum BinOpType {
    prefix = BO,
    values {
        add, sub, mul, div, mod, lt, le, gt, ge, eq, ne,
        and, or
    }
};

root node Program {
    children {
        Declaration declarations { constructor, mandatory }
    }
};

node Declaration {
    children {
        FunDec functionDeclarations,
        FunDef functionDefinitions,
        GlobalDec globalDeclarations,
        GlobalDef globalDefinitions
    }
};

node FunDec {
    children {
        FunHeader header { constructor, mandatory }
    }
};

node FunDef {
    children {
        FunHeader header { constructor, mandatory },
        FunBody body { constructor, mandatory }
    },
    attributes {
        bool isExported { constructor }
    }
};

node FunHeader {
    children {
        RetType returnType { constructor, mandatory },
        Param parameters { constructor }
    },
    attributes {
        string identifier { constructor }
    }
};

node RetType {
    attributes {
        BasicType type { constructor }
    }
};

node GlobalDec {
    children {
        Type type { constructor, mandatory },
        Expr initialValue { constructor }
    },
    attributes {
        string identifier { constructor }
    }
};

node GlobalDef {
    children {
        Type type { constructor, mandatory },
        Expr initialValue { constructor }
    },
    attributes {
        string identifier { constructor },
        bool isExported { constructor }
    }
};

node Type {
    attributes {
        BasicType basicType { constructor }
    }
};

node Var {
    attributes {
        string name { constructor }
    }
};

node Param {
    children {
        Type type { constructor, mandatory }
    },
    attributes {
        string identifier { constructor }
    }
};

node FunBody {
    children {
        Stmt statements { constructor }
    }
};


nodeset Stmt = {
    IfStmt,
    WhileStmt,
    DoWhileStmt,
    ForStmt,
    ReturnStmt,
    Assign,
    FunCall
};

nodeset Expr = {
    BinOp,
    MonOp,
    CastExpr,
    FunCallExpr,
    Var,
    Const
};

node BinOp {
    children {
        Expr left { constructor, mandatory },
        Expr right { constructor, mandatory }
    },
    attributes {
        BinOpType op { constructor }
    }
};

node MonOp {
    children {
        Expr operand { constructor, mandatory }
    },
    attributes {
        MonOpType op { constructor }
    }
};

node CastExpr {
    children {
        Type targetType { constructor, mandatory },
        Expr expression { constructor, mandatory }
    }
};

node FunCallExpr {
    children {
        ExprList arguments { constructor }
    },
    attributes {
        string functionName { constructor }
    }
};

node Const {
    children {
        BoolConst boolValue { constructor },
        IntConst intValue { constructor },
        FloatConst floatValue { constructor }
    }
};

node BoolConst {
    attributes {
        bool value { constructor }
    }
};

node IntConst {
    attributes {
        int value { constructor }
    }
};

node FloatConst {
    attributes {
        float value { constructor }
    }
};

node ExprList {
    children {
        Expr expression { constructor, mandatory },
        ExprList next { constructor }
    }
};

node IfStmt {
    children {
        Expr condition { constructor, mandatory },
        Stmt thenBranch { constructor, mandatory },
        Stmt elseBranch { constructor }
    }
};

node WhileStmt {
    children {
        Expr condition { constructor, mandatory },
        Stmt body { constructor, mandatory }
    }
};

node DoWhileStmt {
    children {
        Stmt body { constructor, mandatory },
        Expr condition { constructor, mandatory }
    }
};

node ForStmt {
    children {
        Assign init { constructor, mandatory },
        Expr condition { constructor, mandatory },
        Assign update { constructor, mandatory },
        Stmt body { constructor, mandatory }
    }
};

node ReturnStmt {
    children {
        Expr returnValue { constructor }
    }
};

node Assign {
    children {
        Var target { constructor, mandatory },
        Expr value { constructor, mandatory }
    }
};


node FunCall {
    children {
        ExprList arguments { constructor }
    },
    attributes {
        string functionName { constructor }
    }
};