start phase RootPhase {
    info = "Denotes the entry point of your compiler",

    actions {
        pass SPdoScanParse;
        Demo;
        print;
    }
};

traversal Print {
    uid = PRT
};


// traversal StrengthReduction {
//     uid = SR,
//     nodes = { Binop }
// };

// traversal ArithmeticCount {
//     uid = AC,
//     nodes = { Binop, Program },
//     travdata {
//         int plusCount,
//         int minusCount,
//         int mulCount,
//         int divCount,
//         int modCount
//     }
// };

// traversal IdentifierCount {
//     uid = IC,
//     nodes = { Var, VarLet },
//     travdata {
//         user htable_stptr identifierCounts
//     }
// };

phase Demo {
    actions {
        traversal RenameIdentifiers {
            uid = RI,
            nodes = { Var, VarLet }
        };

        traversal SumInts {
            uid = SI,
            nodes = { Stmts, Num },
            travdata {
                int sum
            }
        };

        traversal OptSubstraction {
            uid = OS,
            nodes = { Binop }
        };
    }
};

/*** AST ***/

enum MonOpType {
    prefix = MO,
    values {
        not, neg
    }
};

enum BinOpType {
    prefix = BO,
    values {
        add, sub, mul, div, mod, lt, le, gt, ge, eq, ne,
        and, or
    }
};

nodeset Expr = {Num,
    Float,
    Bool,
    Binop,
    Var,
    MonOp,
    Const,
    FunCallExpr};

nodeset Stmt = {
    If,
    While,
    For,
    Return,
    Assign,
    Block
};
// Nodes you want to be able to link to from your symbol table.
nodeset Link = Expr | Stmt;

root node Program {
    children {
        Stmts stmts { constructor, mandatory }
    },
    attributes {
        int plusCount,
        int minusCount,
        int mulCount,
        int divCount,
        int modCount
    }
};

node Stmts {
    children {
        Stmt stmt { constructor, mandatory },
        Stmts next { constructor }
    }
};

node Assign {
    children {
        VarLet let { constructor },
        Expr expr { constructor, mandatory }
    }
};



node Binop {
    children {
        Expr left { constructor, mandatory },
        Expr right { constructor, mandatory }
    },

    attributes {
        BinOpType op { constructor }
    }
};

nodeset Vars {
    nodes = {VarLet, Var},

    attributes {
        string name,
        Link decl
    }
};

node VarLet {
    attributes {
        string name { constructor }  // Repeat from nodeset to add constructor
    }
};

node Var {
    attributes {
        string name { constructor }
    }
};

node Num {
    attributes {
        int val { constructor }
    }
};

node Float {
    attributes {
        float val { constructor }
    }
};

node Bool {
    attributes {
        bool val { constructor }
    }
};

node MonOp {
    children {
        Expr operand { constructor, mandatory }
    },
    attributes {
        MonOpType op { constructor }
    }
};

node Const {
    attributes {
        string value { constructor }
    }
};


node FunCallExpr {
    children {
        ExprList arguments { constructor }
    },
    attributes {
        string functionName { constructor }
    }
};

node ExprList {
    children {
        Expr expression { constructor, mandatory },
        ExprList next { constructor }
    }
};

node If {
    children {
        Expr condition { constructor, mandatory },
        Stmt thenBranch { constructor, mandatory },
        Stmt elseBranch { constructor }
    }
};

node While {
    children {
        Expr condition { constructor, mandatory },
        Stmt body { constructor, mandatory }
    }
};

node For {
    children {
        Assign init { constructor },
        Expr condition { constructor, mandatory },
        Assign update { constructor },
        Stmt body { constructor, mandatory }
    }
};

node Return {
    children {
        Expr returnValue { constructor }
    }
};



node Block {
    children {
        Stmt statements { constructor }
    }
};