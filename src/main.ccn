/*****************************************************************************
 *                                                                           *
 *                                   PHASES                                  *
 *                                                                           *
 *****************************************************************************/

start phase RootPhase {
    actions {
        pass SPdoScanParse;
        VarDefRegularAssignments;
        SemanticAnalysis;
        ArrayParameter;
        BoolOperations;
        FlattenArray;
        Optimizations;
        CodeGen;
        Print;
    }
};

traversal Print {
    uid = PRT
};

phase SemanticAnalysis {
    actions {
        traversal SymbolTableMake {
            uid = ST,
            nodes = ({Program, For, VarDecl, Param, Return} | Linked) | Decl,
            travdata {
                user scopeStackptr scopeStack,
                user htable_stptr unresolvedFuncall
            }
        };
        traversal SemanticAnalysisTraversal {
            uid = SA,
            nodes = {Cast, GlobDef, VarDecl, FunCall, Return, Binop, Monop, Assign}

        };
        traversal PutInitAtStart {
            uid = PAS,
            nodes = {Decls}
        };
}
};

traversal ArrayParameter {
    uid = AP,
    nodes = {FunDef, FunCall}
};

traversal FlattenArray {
    uid = FA,
    nodes = {FunBody, FunCall, VarDecl, Param, ArrExpr}
};

phase BoolOperations{
    actions {
        traversal BoolDisConjunction {
        uid = DBC,
        nodes = {Binop}
        };
        traversal BooleanCast {
        uid = BC,
        nodes = {Cast}
        };
    }

};

phase VarDefRegularAssignments{
    actions {
        traversal VarDefRegAss {
            uid = VDRA,
            nodes = {Program, FunBody}
        };
        traversal VarDefRegAss2 {
            uid = VDRAT,
            nodes = {FunBody}
        };
}
};

phase Optimizations {
    actions {
        traversal ForToWhile {
            uid = FTW,
            nodes = {FunBody}
        };
        traversal ForToWhileTwo {
            uid = FTWT,
            nodes = {For}
        };
    }
};

phase CodeGen {
    actions {
        traversal ConstantTableMake {
            uid = CONSTT,
            nodes = {Program, Num, Float},
            travdata {
                user htable_stptr intTable,
                user htable_stptr floatTable,
                int index
            }
        };

        traversal MakeAssemblyCombine{
            uid = MAC,
            nodes = {Program, FunDef}
        };

        traversal MakeAssemblyFinal {
            uid = MA,
            nodes = {Program}

        };
    }
};

/*****************************************************************************
 *                                                                           *
 *                                   ENUMS                                   *
 *                                                                           *
 *****************************************************************************/

enum Type {
    // T_ collides with bison/flex generated stuff.
    prefix = CT,
    values {
        int, float, bool, void
    }
};




enum MonOpType {
    prefix = MO,
    values {
        not, neg
    }
};

enum BinOpType {
    prefix = BO,
    values {
        add, sub, mul, div, mod, lt, le, gt, ge, eq, ne,
        and, or
    }
};

/*****************************************************************************
 *                                                                           *
 *                                  NODESETS                                 *
 *                                                                           *
 *****************************************************************************/

nodeset Constants = {Float, Bool, Num};

nodeset Operations = {Binop, Monop};

nodeset Decl = {GlobDef, GlobDecl, FunDef};

nodeset Vars = {VarDecl, Var, VarLet};

nodeset Expr {
    nodes = {Cast, FunCall, Var, ArrExpr, Tern} | (Constants | Operations),
    attributes {
        AssemblyList assembly
    }
};

nodeset Stmt {
    nodes = {Assign, ExprStmt, IfElse, While, DoWhile, For, Return},
    attributes {
        AssemblyList assembly
    }
};

nodeset Named {
    nodes = Vars | (Decl | {FunCall, Param, Ids}),
    attributes {
        string name
    }
};

nodeset Typed {
    nodes = Vars | (Decl | (Operations | {Cast, FunCall, Param, Return})),
    attributes {
        Type type
    }
};

// Link you need to adapt when working with the symbol tables.
// I put it as a decl now, because an empty nodeset is not allowed.
nodeset Link {
    nodes = {SymbolTable}
};

nodeset Linked {
    nodes = {FunCall, Var, VarLet},
    attributes {
        SymbolEntry symbolEntry,
        int Index,
        int currentScope
    }
};

/*****************************************************************************
 *                                                                           *
 *                                    NODES                                  *
 *                                                                           *
 *****************************************************************************/

root node Program {
    children {
        SymbolTable symbolTable,
        Decls decls { constructor, mandatory },
        ConstantTable constantTable,
        AssemblyList assemblyList,
        AssemblyList constant,
        AssemblyList import,
        AssemblyList export,
        AssemblyList global
    }
};


node Decls {
    children {
        Decl decl { constructor, mandatory },
        Decls next { constructor }
    }
};

node Exprs {
    children {
        Expr expr { constructor, mandatory },
        Exprs next { constructor }
    }
};

node ArrExpr {
    children {
        Exprs exprs { constructor, mandatory }
    }
};

node Ids {
    children {
        Ids next { constructor }
    },

    attributes {
        string name { constructor }
    }
};

node ExprStmt {
    children {
        Expr expr { constructor, mandatory }
    }
};

node Return {
    children {
        Expr expr { constructor }
    }
};

node FunCall {
    children {
        Exprs fun_args { constructor }
    },

    attributes {
        string name { constructor },
        int inputCount,
        int scope
    }
};

node Cast {
    children {
        Expr expr {constructor, mandatory }
    },

    attributes {
        Type type { constructor }
    }
};



node FunDef {
    children {
        SymbolTable symbolTable,
        FunBody body { constructor },
        Params params { constructor },
        AssemblyList assemblyList
        
    },
    attributes {
        string name { constructor },
        Type type { constructor },
        bool export { constructor },
        int index,
        string scopename
    }
};

node FunBody {
    children {
        VarDecls vardecls {constructor},
        FunDefs local_fundefs {constructor},
        Stmts stmts {constructor}
    }
};

node IfElse {
    children {
        Expr cond { constructor, mandatory },
        Stmts then { constructor, mandatory },
        Stmts else_block { constructor }
    }
};

node While {
    children {
        Expr cond { constructor, mandatory },
        Stmts block { constructor }
    }
};

node DoWhile {
    children {
        Expr cond { constructor, mandatory },
        Stmts block { constructor }
    }
};

node For {
    children {
        Expr start_expr { constructor, mandatory },
        Expr stop { constructor, mandatory },
        Expr step { constructor },
        Stmts block { constructor, mandatory }
    },

    attributes {
        string var {constructor},
        bool newVar {constructor},
        int varIndex
    }
};

node GlobDecl {
    children {
        Ids dims {constructor},
        Params params {constructor}
    },

    attributes {
        string name { constructor },
        Type type { constructor },
        bool isVar {constructor}
    }
};

node GlobDef {
    children {
        Exprs dims {constructor},
        Expr init {constructor}
    },

    attributes {
        string name { constructor },
        Type type { constructor },
        bool export {constructor},
        int index
    }
};

node Param {
    children {
        Ids dims {constructor}
    },

    attributes {
        string name { constructor },
        Type type { constructor }
    }
};

node Params {
    children {
        Param param { constructor, mandatory },
        Params next { constructor }
    }
};

node FunDefs {
    children {
        FunDef fundef { constructor, mandatory },
        FunDefs next { constructor }
    }
};

node VarDecls {
    children {
        VarDecl vardecl { constructor, mandatory },
        VarDecls next { constructor }
    }
};


node VarDecl {
    children {
        Exprs dims { constructor },
        Expr init { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor }
    }
};


node Stmts {
    children {
        Stmt stmt { constructor, mandatory },
        Stmts next { constructor }
    }
};

node SymbolTable {
    children {
        SymbolEntry entry { constructor },
        SymbolTable next { constructor }
    }
};

node SymbolEntry {
    children {
        Exprs dims { constructor }
        },
    attributes {
        Params params,
        string name { constructor },
        Type type { constructor },
        int declaredAtLine { constructor },
        int scopeLevel { constructor },
        int nodetype { constructor },
        int dimsCount {constructor},
        string scopeName {constructor},
        int index, 
        bool externB,
        bool global
    }
};

node Assign {
    children {
        VarLet let { constructor },
        Expr expr { constructor, mandatory }
    },
    attributes {
        bool update
    }
};



node Binop {
    children {
        Expr left { constructor, mandatory },
        Expr right { constructor, mandatory }

    },

    attributes {
        BinOpType op { constructor }
    }
};

node Monop {
    children {
        Expr operand { constructor, mandatory }
    },

    attributes {
        MonOpType op { constructor }
    }
};

node VarLet {
    children {
        Exprs indices {constructor}
    },
    attributes {
        string name { constructor }
    }
};

node Var {
    children {
        Exprs indices {constructor}
    },
    attributes {
        string name { constructor }
    }
};

node Num {
    attributes {
        int val { constructor },
        ConstantEntry link
    }
};

node Tern {
    children {
        Expr cond {constructor},
        Expr then_expr {constructor},
        Expr else_expr {constructor}
    },
    attributes {
        int count
    }
};

node Float {
    attributes {
        float val { constructor },
        ConstantEntry link
    }
};

node Bool {
    attributes {
        bool val { constructor },
        ConstantEntry link
    }
};

node ConstantTable {
    children {
        ConstantEntry entry { constructor},
        ConstantTable next { constructor }
    }
};

node ConstantEntry {
    attributes {
        Expr val {constructor},
        int index {constructor}
    }
};

node AssemblyList {
    children {
        Assembly assembly { constructor},
        AssemblyList next { constructor }
    }
};

node Assembly {
    attributes {
        string instruction {constructor},
        string operands {constructor},
        string comment
    }
};